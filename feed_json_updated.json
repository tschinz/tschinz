{"version": "https://jsonfeed.org/version/1", "title": "Braindump", "home_page_url": "https://github.com/tschinz/znotes/", "feed_url": "https://github.com/tschinz/znotes/feed_json_updated.json", "description": "Personal Knowledge Base, for everything I want to remember.", "icon": null, "authors": [{"name": "tschinz"}], "language": "en", "items": [{"id": "https://github.com/tschinz/znotes/blog/2024/01/23/hello-world.html", "url": "https://github.com/tschinz/znotes/blog/2024/01/23/hello-world.html", "title": "Hello world!", "content_html": "<h1>Hello world!</h1>\n<p>My first blogpost to see how mkdocs works.</p>", "image": null, "date_modified": "2024-11-20T20:27:16+00:00", "authors": [{"name": "tschinz"}], "tags": ["Hello World"]}, {"id": "https://github.com/tschinz/znotes/blog/2024/11/20/rust-string-formatting---an-ascii-art-cheatsheet.html", "url": "https://github.com/tschinz/znotes/blog/2024/11/20/rust-string-formatting---an-ascii-art-cheatsheet.html", "title": "Rust String Formatting - An ASCII-Art Cheatsheet!", "content_html": "<h1>Rust String Formatting - An ASCII-Art Cheatsheet!</h1>\n<p>For once a post of a different kind. Let's talk about the versatile Rust String formatting and how to use it. The ASCII-Art shows the different elements in the <code>format!()</code>, <code>print!()</code> and <code>println!()</code> macros.</p>\n<p>For example what is the output of the following code?</p>\n<p><code>rust\nprint!(\"{0:*&gt;+10.3e}\", std::f64::consts::E);</code></p>", "image": null, "date_modified": "2024-11-20T20:27:16+00:00", "authors": [{"name": "tschinz"}], "tags": ["format!()", "macros", "print!()", "println!()", "rust"]}]}